<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<title>Algorithmes génétiques: application au problème du voyageur de commerce.</title>
<!-- 2017-10-28 sam. 15:33 -->
<meta  http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta  name="generator" content="Org-mode" />
<meta  name="author" content="Mathieu Mandret" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center; }
  .todo   { font-family: monospace; color: red; }
  .done   { color: green; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  pre.src-sh:before    { content: 'sh'; }
  pre.src-bash:before  { content: 'sh'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-R:before     { content: 'R'; }
  pre.src-perl:before  { content: 'Perl'; }
  pre.src-java:before  { content: 'Java'; }
  pre.src-sql:before   { content: 'SQL'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.right  { text-align: center;  }
  th.left   { text-align: center;   }
  th.center { text-align: center; }
  td.right  { text-align: right;  }
  td.left   { text-align: left;   }
  td.center { text-align: center; }
  dt { font-weight: bold; }
  .footpara:nth-child(2) { display: inline; }
  .footpara { display: block; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  /*]]>*/-->
</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
<script type="text/javascript" src="http://orgmode.org/mathjax/MathJax.js"></script>
<script type="text/javascript">
<!--/*--><![CDATA[/*><!--*/
    MathJax.Hub.Config({
        // Only one of the two following lines, depending on user settings
        // First allows browser-native MathML display, second forces HTML/CSS
        //  config: ["MMLorHTML.js"], jax: ["input/TeX"],
            jax: ["input/TeX", "output/HTML-CSS"],
        extensions: ["tex2jax.js","TeX/AMSmath.js","TeX/AMSsymbols.js",
                     "TeX/noUndefined.js"],
        tex2jax: {
            inlineMath: [ ["\\(","\\)"] ],
            displayMath: [ ['$$','$$'], ["\\[","\\]"], ["\\begin{displaymath}","\\end{displaymath}"] ],
            skipTags: ["script","noscript","style","textarea","pre","code"],
            ignoreClass: "tex2jax_ignore",
            processEscapes: false,
            processEnvironments: true,
            preview: "TeX"
        },
        showProcessingMessages: true,
        displayAlign: "center",
        displayIndent: "2em",

        "HTML-CSS": {
             scale: 100,
             availableFonts: ["STIX","TeX"],
             preferredFont: "TeX",
             webFont: "TeX",
             imageFont: "TeX",
             showMathMenu: true,
        },
        MMLorHTML: {
             prefer: {
                 MSIE:    "MML",
                 Firefox: "MML",
                 Opera:   "HTML",
                 other:   "HTML"
             }
        }
    });
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">Algorithmes génétiques: application au problème du voyageur de commerce.</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Le problème du voyageur de commerce</a></li>
<li><a href="#sec-2">2. L'algorithme génétique</a>
<ul>
<li><a href="#sec-2-1">2.1. Les villes</a></li>
<li><a href="#sec-2-2">2.2. Les chemin</a></li>
<li><a href="#sec-2-3">2.3. La populations</a></li>
<li><a href="#sec-2-4">2.4. L'initialisation</a></li>
<li><a href="#sec-2-5">2.5. La selection</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Le problème du voyageur de commerce</h2>
<div class="outline-text-2" id="text-1">
<p>
On cherche à determiner quel est l'ordre de parcours optimal de \(n\) villes. Ici, nous considérons que la ville de départ est un critère determinant,
donc \(A \rightarrow B \rightarrow C  \neq   C \rightarrow A \rightarrow B\) même si l'ordre des villes à l'intérieur du 
voyage reste le même. On est ici face à un problème d'explosion combinatoire, la liste des parcours est en fait la liste des permutations des villes.
Par exemple, pour 3 villes \(A, B \text{et } C\) on a les possibilités suivantes:
\(A B C \\ A C B \\ B A C \\ B C A \\ C A B \\ C B A\)
</p>

<p>
Pour \(n\) villes, on a \(n!\) permutations. La fonction factorielle croît extrement rapidement avec \(n\).
</p>

<div class="figure">
<p><img src="./complexite.png" alt="complexite.png" />
</p>
<p><span class="figure-number">Figure 1:</span> Croissance de la fonction factorielle comparée à \(n^2\) et \(n\times10\)</p>
</div>

<p>
Il est encore envisageable d'énumerer toutes ces permutations pour des \(n\) relativement petits comme \(10! = 3628800\) mais \(30! = 265252859812191058636308480000000\) il n'est plus possible
de calculer toutes les permutations dans un temps raisonnable. On ne peut donc pas proposer d'algorithme deterministe pour résoudre le problème du voyageur de commerce dès que le nombre de villes
dépasse 10. La solution est d'utiliser un <b>algorithme génétique</b>. Il sera implémenté dans la langage
Python dans sa version 3.6 en utilisant les librairies <i>math</i>, <i>matplotlib</i> et <i>numpy</i>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> L'algorithme génétique</h2>
<div class="outline-text-2" id="text-2">
<p>
Avant d'expliquer l'algorithme en lui même, il est important de déterminer la représentation informatisée du problème du voyageur de commerce.
On utilisera un paradigme de programmation orienté objet, ou les classes seront: Ville, Chemin et Population.
</p>
</div>
<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> Les villes</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Une ville est représentée par une un couple de flottants correspondants à ses coordonées \((X,Y)\). Un exemple d'instanciation d'une ville en \(X = 1\) et \(Y = 5\) serait:
</p>
<div class="org-src-container">

<pre class="src src-python">v1 = Ville(1, 5)
</pre>
</div>
<p>
Pour calculer la longueur d'un chemin, il faut déjà pouvoir determiner la distance d'une ville à une autre
la classe ville implemente donc la méthode <i>distance<sub>to</sub></i> dont l'en-tête est:
</p>
<div class="org-src-container">

<pre class="src src-python">def distance_to(self, other)
</pre>
</div>

<p>
Le paramètre <i>self</i> fait réference a la ville courante et other à l'autre ville. Elle retourne la distance entre
les coordonnées de chaque ville calculée grâce à la formule:
$ \text{distance} = \sqrt{(X_a-X_b)^2+(Y_a-Y_b)^2}$
Cette formule est implémentée en Python dans la fonction <i>math.hypot</i>.
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> Les chemin</h3>
<div class="outline-text-3" id="text-2-2">
<p>
Un chemin est une liste ordonnée de villes uniques.
L'unicité des ses membres est garanties grace à a structure de données <i>set</i>.
Mais pour savoir si une ville est déjà dans le <i>set</i>, il faut que 2 villes soit comparables, la classe
<i>Ville</i> a donc une méthode de comparaison <i><span class="underline"><span class="underline">eq</span></span></i> qui compare simplement les coordonnées des villes une
à une.
Une ville peut être construite de 3 façons différentes: depuis une liste de villes prédéfinies, en créant
une liste de villes aux coordonnées aléatoire ou en lisant un fichier <i>csv</i> contenant les coordonnées
des villes. 
</p>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> La populations</h3>
<div class="outline-text-3" id="text-2-3">
<p>
Une population est une liste de chemins uniques. Elle peut être construite soit à partir
d'une carte, qui est en fait un chemin, soit d'un nombre de villes, dans ce cas elle générera la
carte aléatoirement.
</p>


<p>
Nous étudierons l'agorithme à partir des points suivant:
</p>
<ul class="org-ul">
<li>L'initialisation
</li>
<li>La selection
</li>
<li>Le croisement
</li>
<li>La mutation
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4"><span class="section-number-3">2.4</span> L'initialisation</h3>
<div class="outline-text-3" id="text-2-4">
<p>
Comme énoncé précedemment, il est important d'avoir une grande diversité dans la population
initiale, de cette manière, nous augmentons nos chances d'avoir des chemin se rappochants
le plus possible de la solution. En pratique, il faut donc que lors de l'initialisation d'une
population, chacun de ses membres soit unique.
</p>
</div>
</div>

<div id="outline-container-sec-2-5" class="outline-3">
<h3 id="sec-2-5"><span class="section-number-3">2.5</span> La selection</h3>
<div class="outline-text-3" id="text-2-5">
<p>
Pour avoir une évolution qui crée une meilleure population, il est important de pouvoir selectionner
les meilleurs éléments. Mais il faut tout d'abord determiner comment on évalue un élément de la
population.
Le critère d'évaluation d'un chemin, ou sa <i>fitness</i>, est la distance totale entre toutes
ses villes. Plus cette distance est petit, plus le chemin est adequat. La longueur totale
d'un chemin est données par la méthode <i>fitness</i> de la classe <i>Chemin</i> de la manière suivante
</p>
<div class="org-src-container">

<pre class="src src-python">def fitness(self):
    """
    Retourne la valeur de fitness de ce chemin, qui correspond a
    la distance totale entre ses villes
    """
    fitness = 0
    # Parcours de la premiere a l'avant derniere ville du chemin
    for i in range(len(self) - 1):
	# Ajouter la distance entre les 2 points courant a la distance totale
	fitness += self.liste_villes[i].distance_to(self.liste_villes[i + 1])
    return fitness
</pre>
</div>
<p>
On parcoure simplement les villes jusqu'a l'avant dernière de la liste en calculant à chaque
fois la distance de la courante à la suivante.
</p>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: Mathieu Mandret</p>
<p class="date">Created: 2017-10-28 sam. 15:33</p>
<p class="creator"><a href="http://www.gnu.org/software/emacs/">Emacs</a> 25.3.1 (<a href="http://orgmode.org">Org</a> mode 8.2.10)</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
